import 'package:flutter/material.dart';
import 'package:syncfusion_flutter_pdfviewer/pdfviewer.dart';
//import 'package:material_floating_search_bar/material_floating_search_bar.dart';

void main() => runApp(const ProtocolApp());

const String assetsPath = 'assets/';

const List<String> protocolTitles = [
  'Preface',
  'Operations',
  'Procedures',
  'Treatment',
  'Medications',
  'Trauma System',
  'Hazardous Materials',
];

class Protocol {
  final String title;
  final SfPdfViewer document;

  Protocol(this.title)
      : document = SfPdfViewer.asset(assetsPath + title + '.pdf');
}

class ProtocolApp extends StatefulWidget {
  const ProtocolApp({Key? key}) : super(key: key);

  @override
  _ProtocolAppState createState() => _ProtocolAppState();
}

class _ProtocolAppState extends State<ProtocolApp> {
  final ProtocolRouterDelegate _routerDelegate = ProtocolRouterDelegate();
  final ProtocolRouteInformationParser _routeInformationParser =
      ProtocolRouteInformationParser();

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      title: 'The Cookbook',
      routerDelegate: _routerDelegate,
      routeInformationParser: _routeInformationParser,
    );
  }
}

class ProtocolRouteInformationParser
    extends RouteInformationParser<ProtocolRoutePath> {
  @override
  Future<ProtocolRoutePath> parseRouteInformation(
      RouteInformation routeInformation) async {
    final uri = Uri.parse(routeInformation.location!);

    if (uri.pathSegments.isEmpty) {
      return ProtocolRoutePath.home();
    }

    if (uri.pathSegments.length == 2) {
      if (uri.pathSegments[0] != 'protocol') return ProtocolRoutePath.unknown();

      var remaining = uri.pathSegments[1];
      var id = int.tryParse(remaining);

      if (id == null) return ProtocolRoutePath.unknown();

      return ProtocolRoutePath.details(id);
    }

    return ProtocolRoutePath.unknown();
  }

  @override
  RouteInformation? restoreRouteInformation(ProtocolRoutePath path) {
    if (path.isUnknown) {
      return const RouteInformation(location: '/404');
    }
    if (path.isHomePage) {
      return const RouteInformation(location: '/');
    }
    if (path.isDetailsPage) {
      return RouteInformation(location: '/protocol/${path.id}');
    }
    return null;
  }
}

class ProtocolRouterDelegate extends RouterDelegate<ProtocolRoutePath>
    with ChangeNotifier, PopNavigatorRouterDelegateMixin<ProtocolRoutePath> {
  @override
  final GlobalKey<NavigatorState> navigatorKey;

  final List<Protocol> protocols = [
    for (final title in protocolTitles) Protocol(title)
  ];

  Protocol? _selectedProtocol;
  bool show404 = false;

  ProtocolRouterDelegate() : navigatorKey = GlobalKey<NavigatorState>();

  @override
  ProtocolRoutePath get currentConfiguration {
    if (show404) {
      return ProtocolRoutePath.unknown();
    }
    return _selectedProtocol == null
        ? ProtocolRoutePath.home()
        : ProtocolRoutePath.details(protocols.indexOf(_selectedProtocol!));
  }

  @override
  Widget build(BuildContext context) {
    return Navigator(
      key: navigatorKey,
      pages: [
        MaterialPage(
          key: const ValueKey('ProtocolListPage'),
          child: ProtocolListScreen(
            protocols: protocols,
            onTapped: _handleProtocolTapped,
          ),
        ),
        if (show404)
          const MaterialPage(
              key: ValueKey('UnknownPage'), child: UnknownScreen())
        else if (_selectedProtocol != null)
          ProtocolDetailsPage(protocol: _selectedProtocol)
      ],
      onPopPage: (route, result) {
        if (!route.didPop(result)) {
          return false;
        }

        _selectedProtocol = null;
        show404 = false;
        notifyListeners();

        return true;
      },
    );
  }

  @override
  Future<void> setNewRoutePath(ProtocolRoutePath path) async {
    if (path.isUnknown) {
      _selectedProtocol = null;
      show404 = true;
      return;
    }

    if (path.isDetailsPage) {
      if (path.id! < 0 || path.id! > protocols.length - 1) {
        show404 = true;
        return;
      }

      _selectedProtocol = protocols[path.id!];
    } else {
      _selectedProtocol = null;
    }

    show404 = false;
  }

  void _handleProtocolTapped(Protocol protocol) {
    _selectedProtocol = protocol;
    notifyListeners();
  }
}

class ProtocolDetailsPage extends Page {
  final Protocol? protocol;

  ProtocolDetailsPage({this.protocol}) : super(key: ValueKey(protocol));

  @override
  Route createRoute(BuildContext context) {
    return MaterialPageRoute(
      settings: this,
      builder: (BuildContext context) {
        return ProtocolDetailsScreen(protocol: protocol!);
      },
    );
  }
}

class ProtocolRoutePath {
  final int? id;
  final bool isUnknown;

  ProtocolRoutePath.home()
      : id = null,
        isUnknown = false;

  ProtocolRoutePath.details(this.id) : isUnknown = false;

  ProtocolRoutePath.unknown()
      : id = null,
        isUnknown = true;

  bool get isHomePage => id == null;

  bool get isDetailsPage => id != null;
}

class ProtocolListScreen extends StatelessWidget {
  final List<Protocol> protocols;
  final ValueChanged<Protocol> onTapped;

  const ProtocolListScreen({
    Key? key,
    required this.protocols,
    required this.onTapped,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.redAccent[700],
        title: const Text('theCookbook'),
        actions: <Widget>[
          IconButton(
            icon: const Icon(Icons.menu_rounded),
            //tooltip: 'Show Snackbar',
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('This is a hamburger menu')));
            },
          ),
        ],
      ),
      body: ListView.builder(
        itemCount: protocols.length,
        itemBuilder: (BuildContext context, int index) {
          return Card(
              child: ListTile(
                trailing: Icon(Icons.arrow_forward_ios_rounded),
                title: Text(protocols[index].title),
                onTap: () => onTapped(protocols[index]),
              )
            );
        },
      ),
    );
  }
}

class ProtocolDetailsScreen extends StatelessWidget {
  final Protocol protocol;

  const ProtocolDetailsScreen({Key? key, required this.protocol})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(protocol.title),
      ),
      body: protocol.document,
    );
  }
}

class UnknownScreen extends StatelessWidget {
  const UnknownScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(title: const Text('404!')),
        body: const Center(
          child: Text('404!'),
        ));
  }
}

//This is all my search code. Need to just take out what we need.
/*
void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Search Bar App',
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  static const historyLength = 5;

  List<String> _searchHistory = [
    'fuchsia',
    'flutter',
    'widgets',
    'resocoder',
  ];

  List<String> filteredSearchHistory;

  String selectedTerm;

  List<String> filterSearchTerms({
    @required String filter,
  }) {
    if (filter != null && filter.isNotEmpty) {
      return _searchHistory.reversed
          .where((term) => term.startsWith(filter))
          .toList();
    } else {
      return _searchHistory.reversed.toList();
    }
  }

  void addSearchTerm(String term) {
    if (_searchHistory.contains(term)) {
      putSearchTermFirst(term);
      return;
    }

    _searchHistory.add(term);
    if (_searchHistory.length > historyLength) {
      _searchHistory.removeRange(0, _searchHistory.length - historyLength);
    }

    filteredSearchHistory = filterSearchTerms(filter: null);
  }

  void deleteSearchTerm(String term) {
    _searchHistory.removeWhere((t) => t == term);
    filteredSearchHistory = filterSearchTerms(filter: null);
  }

  void putSearchTermFirst(String term) {
    deleteSearchTerm(term);
    addSearchTerm(term);
  }

  FloatingSearchBarController controller;

  @override
  void initState() {
    super.initState();
    controller = FloatingSearchBarController();
    filteredSearchHistory = filterSearchTerms(filter: null);
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: FloatingSearchBar(
        controller: controller,
        body: FloatingSearchBarScrollNotifier(
          child: SearchResultsListView(
            searchTerm: selectedTerm,
          ),
        ),
        transition: CircularFloatingSearchBarTransition(),
        physics: BouncingScrollPhysics(),
        title: Text(
          selectedTerm ?? 'The Search App',
          style: Theme.of(context).textTheme.headline6,
        ),
        hint: 'Search and find out...',
        actions: [
          FloatingSearchBarAction.searchToClear(),
        ],
        onQueryChanged: (query) {
          setState(() {
            filteredSearchHistory = filterSearchTerms(filter: query);
          });
        },
        onSubmitted: (query) {
          setState(() {
            addSearchTerm(query);
            selectedTerm = query;
          });
          controller.close();
        },
        builder: (context, transition) {
          return ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: Material(
              color: Colors.white,
              elevation: 4,
              child: Builder(
                builder: (context) {
                  if (filteredSearchHistory.isEmpty &&
                      controller.query.isEmpty) {
                    return Container(
                      height: 56,
                      width: double.infinity,
                      alignment: Alignment.center,
                      child: Text(
                        'Start searching',
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                        style: Theme.of(context).textTheme.caption,
                      ),
                    );
                  } else if (filteredSearchHistory.isEmpty) {
                    return ListTile(
                      title: Text(controller.query),
                      leading: const Icon(Icons.search),
                      onTap: () {
                        setState(() {
                          addSearchTerm(controller.query);
                          selectedTerm = controller.query;
                        });
                        controller.close();
                      },
                    );
                  } else {
                    return Column(
                      mainAxisSize: MainAxisSize.min,
                      children: filteredSearchHistory
                          .map(
                            (term) => ListTile(
                              title: Text(
                                term,
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                              leading: const Icon(Icons.history),
                              trailing: IconButton(
                                icon: const Icon(Icons.clear),
                                onPressed: () {
                                  setState(() {
                                    deleteSearchTerm(term);
                                  });
                                },
                              ),
                              onTap: () {
                                setState(() {
                                  putSearchTermFirst(term);
                                  selectedTerm = term;
                                });
                                controller.close();
                              },
                            ),
                          )
                          .toList(),
                    );
                  }
                },
              ),
            ),
          );
        },
      ),
    );
  }
}

class SearchResultsListView extends StatelessWidget {
  final String searchTerm;

  const SearchResultsListView({
    Key key,
    @required this.searchTerm,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    if (searchTerm == null) {
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.search,
              size: 64,
            ),
            Text(
              'Start searching',
              style: Theme.of(context).textTheme.headline5,
            )
          ],
        ),
      );
    }

    final fsb = FloatingSearchBar.of(context);

    return ListView(
      padding: EdgeInsets.only(top: fsb.height + fsb.margins.vertical),
      children: List.generate(
        50,
        (index) => ListTile(
          title: Text('$searchTerm search result'),
          subtitle: Text(index.toString()),
        ),
      ),
    );
  }
}
*/
